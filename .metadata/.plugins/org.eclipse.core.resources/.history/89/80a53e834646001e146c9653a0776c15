package org.itri.ImageConverter;

import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.SocketException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import javax.imageio.ImageIO;

import org.apache.commons.codec.binary.Hex;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.NoHttpResponseException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.util.EntityUtils;

public class ImageConverter {
	
	static String BASE_URL = "";
	static String START_REQUEST = "";
	static String NEXT_REQUEST = "";
	static String GAP_REQUEST = "";
	static String END_REQUEST = "";
	static final int BATCH_SIZE = 1000;
	
	// main function here
	public static void EPaperPost(BufferedImage image, String ipAddress) {

	    BASE_URL = "http://" + ipAddress + "/";
	    START_REQUEST = BASE_URL + "EPDI_";
	    NEXT_REQUEST = BASE_URL + "NEXT_";
	    GAP_REQUEST = BASE_URL + "ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppiodaLOAD_";
		END_REQUEST = BASE_URL + "SHOW_";
	    

		// 檢查圖像尺寸
		if (image.getWidth() != 400 || image.getHeight() != 300) {
			System.out.println("Image dimensions are not 400x300.");
			return;
		}

		// 轉換圖像
		int[][] binaryImage = convertToBinary(image);

		// 將二進制圖像轉換為字符串
		String result = convertImageToString(binaryImage);
		

		// 上傳結果到給電子紙並更新
		uploadInBatches(result);

		System.out.println("上傳完成");
	}
	
	public static int[][] convertToBinary(BufferedImage image) {
		int width = image.getWidth();
		int height = image.getHeight();
		int[][] result = new int[height][width];

		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				int color = image.getRGB(x, y);
				int red = (color >> 16) & 0xff;
				int green = (color >> 8) & 0xff;
				int blue = color & 0xff;
				
				// 計算灰階度值
				int gray = (red + green + blue) / 3;

				// 設定二進制值
				result[y][x] = gray < 200 ? 0 : 1;
			}
		}

		return result;
	}

	
    // 將binary 資訊轉成String
	public static String convertImageToString(int[][] binaryImage) {
		StringBuilder sb = new StringBuilder();

		for (int y = 0; y < binaryImage.length; y++) {
			for (int x = 0; x < binaryImage[y].length; x += 8) {
				int value = 0;
				for (int i = 0; i < 8; i++) {
					value = (value << 1) | binaryImage[y][x + i];
				}
				sb.append(byteToStr(value));
			}
		}

		return sb.toString();
	}
	
    // 將byte轉換成String
	public static String byteToStr(int v) {
		char char1 = (char) ((v & 0xF) + 97);
		char char2 = (char) (((v >> 4) & 0xF) + 97);
		return new String(new char[] { char1, char2 });
	}
	
    // 將String 儲存至Txt
	public static void saveToTxt(String content, String filename) {
		try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
			writer.write(content);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// 傳送http Post 請求
	private static void sendPostRequest(String requestUrl) {
	    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
	        HttpPost httpPost = new HttpPost(requestUrl);
	        httpPost.setEntity(new StringEntity("")); // Sending empty data

	        try (CloseableHttpResponse response = httpClient.execute(httpPost)) {
	            int statusCode = response.getStatusLine().getStatusCode();

	        }
	    }catch (NoHttpResponseException e) {
	            //System.out.println("No response from server at: " + requestUrl);
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	}


	// 批次上傳資料
	public static void uploadInBatches(String data) {
		// 發送起始請求
		sendPostRequest(START_REQUEST);

		for (int i = 0; i < data.length(); i += BATCH_SIZE) {
			
			String batch = data.substring(i, Math.min(i + BATCH_SIZE, data.length()));
			
			String requestUrl = constructRequestUrl(batch);
			
			
			//System.out.println(requestUrl);

			sendPostRequest(requestUrl);

		}

		 sendPostRequest(NEXT_REQUEST);
		 for (int i = 0 ; i < 30 ; i++) {
		 sendPostRequest(GAP_REQUEST);
		 }
		// 發送結束請求
		sendPostRequest(END_REQUEST);
	}
    
	// 建立URL
	private static String constructRequestUrl(String batch) {
		
		StringBuilder url = new StringBuilder(BASE_URL);
		url.append(batch);
		url.append("iodaLOAD_");
		
		
		return url.toString();
	}
	
}
