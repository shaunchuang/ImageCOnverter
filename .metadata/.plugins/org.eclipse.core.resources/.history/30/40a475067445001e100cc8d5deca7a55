package org.itri.ImageConverter;

import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.SocketException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import javax.imageio.ImageIO;

import org.apache.commons.codec.binary.Hex;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.util.EntityUtils;

public class ImageConverter {
	
	private static String IPADDRESS = "";
	private static String BASE_URL = "http://" + IPADDRESS + "/";
	private static String START_REQUEST = BASE_URL + "EPDI_";
	private static String NEXT_REQUEST = BASE_URL + "NEXT_";
	private static String GAP_REQUEST = BASE_URL + "ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppiodaLOAD_";
	private static String END_REQUEST = BASE_URL + "SHOW_";
	private static final int BATCH_SIZE = 1000;
	// 設定logger存到D槽
	private static final Logger LOGGER = Logger.getLogger(ImageConverter.class.getName());
	static {
		try {
			FileHandler fileHandler = new FileHandler("D:\\ImageConverterLog.log", true);
			fileHandler.setFormatter(new SimpleFormatter());
			LOGGER.addHandler(fileHandler);
		} catch (IOException e) {
			LOGGER.severe("Failed to set up log handler: " + e.getMessage());
		}
	}
	// main function here
	public static void main(String[] args) {
		
		if (args.length != 4) {
	        System.out.println("Usage: java ImageConverter -ip <IP_ADDRESS> -g <IMAGE_PATH>");
	        return;
	    }

	    String ipAddress = null;
	    String imagePath = null;

	    // Parse the arguments
	    for (int i = 0; i < args.length; i++) {
	        switch (args[i]) {
	            case "-ip":
	                if (i + 1 < args.length) {
	                    ipAddress = args[++i];
	                }
	                break;
	            case "-g":
	                if (i + 1 < args.length) {
	                    imagePath = args[++i];
	                }
	                break;
	            default:
	                System.out.println("Unknown argument: " + args[i]);
	                System.out.println("Usage: java ImageConverter -ip <IP_ADDRESS> -g <IMAGE_PATH>");
	                return;
	        }
	    }

	    if (ipAddress == null || imagePath == null) {
	        System.out.println("Usage: java ImageConverter -ip <IP_ADDRESS> -g <IMAGE_PATH>");
	        IPADDRESS = ipAddress;
	        return;
	    }
		
		try {
			// 讀取PNG圖像
			BufferedImage image = ImageIO.read(new File(imagePath));

			// 檢查圖像尺寸
			if (image.getWidth() != 400 || image.getHeight() != 300) {
				System.out.println("Image dimensions are not 400x300.");
				return;
			}

			// 轉換圖像
			int[][] binaryImage = convertToBinary(image);

			// 將二進制圖像轉換為字符串
			String result = convertImageToString(binaryImage);
			LOGGER.info(result);

			// 保存結果到txt文件
			//saveToTxt(result, "D:\\output.txt");

			// 上傳結果到伺服器
			uploadInBatches(result);

			System.out.println("上傳完成");

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	//將圖片轉成Binary 二元圖片
	public static int[][] convertToBinary(BufferedImage image) {
		int width = image.getWidth();
		int height = image.getHeight();
		int[][] result = new int[height][width];

		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				int color = image.getRGB(x, y);
				int red = (color >> 16) & 0xff;
				int green = (color >> 8) & 0xff;
				int blue = color & 0xff;

				// 計算灰度值
				int gray = (red + green + blue) / 3;

				// 設定二進制值
				result[y][x] = gray < 200 ? 0 : 1;
			}
		}

		return result;
	}
	
    // 將binary 資訊轉成String
	public static String convertImageToString(int[][] binaryImage) {
		StringBuilder sb = new StringBuilder();

		for (int y = 0; y < binaryImage.length; y++) {
			for (int x = 0; x < binaryImage[y].length; x += 8) {
				int value = 0;
				for (int i = 0; i < 8; i++) {
					value = (value << 1) | binaryImage[y][x + i];
				}
				sb.append(byteToStr(value));
			}
		}

		return sb.toString();
	}
	
    // 將byte轉換成String
	public static String byteToStr(int v) {
		char char1 = (char) ((v & 0xF) + 97);
		char char2 = (char) (((v >> 4) & 0xF) + 97);
		return new String(new char[] { char1, char2 });
	}
	
    // 將String 儲存至Txt
	public static void saveToTxt(String content, String filename) {
		try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
			writer.write(content);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// 傳送http Post 請求
	private static void sendPostRequest(String requestUrl) {
	    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
	        HttpPost httpPost = new HttpPost(requestUrl);
	        httpPost.setEntity(new StringEntity("")); // Sending empty data

	        try (CloseableHttpResponse response = httpClient.execute(httpPost)) {
	            int statusCode = response.getStatusLine().getStatusCode();

	            // Uncomment if you want to print the response
	            // String responseBody = EntityUtils.toString(response.getEntity());
	            // System.out.println(responseBody);

	            if (statusCode == 200) {
	                System.out.println("Successfully sent data to: " + requestUrl);
	            } else {
	                System.out.println("Failed to send data. Response code: " + statusCode);
	            }

	            // Sleep for 0.5s
	            //Thread.sleep(100);
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	}


	// 批次上傳資料
	public static void uploadInBatches(String data) {
		// 發送起始請求
		sendPostRequest(START_REQUEST);

		for (int i = 0; i < data.length(); i += BATCH_SIZE) {
			
			String batch = data.substring(i, Math.min(i + BATCH_SIZE, data.length()));
			//String hexString = Hex.encodeHexString(batch.getBytes());
			//System.out.println(hexString);
            
			
			String requestUrl = constructRequestUrl(batch);
			LOGGER.info(batch);
			
			System.out.println(requestUrl);
			LOGGER.info(requestUrl);

			sendPostRequest(requestUrl);
//			try {
//				Thread.sleep(1000);
//			} catch (InterruptedException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
		}

		 sendPostRequest(NEXT_REQUEST);
		 for (int i = 0 ; i < 30 ; i++) {
		 sendPostRequest(GAP_REQUEST);
		 }
		// 發送結束請求
		sendPostRequest(END_REQUEST);
	}
    
	// 建立URL
	private static String constructRequestUrl(String batch) {
		
		StringBuilder url = new StringBuilder(BASE_URL);
		url.append(batch);
		url.append("iodaLOAD_");
		
		
		return url.toString();
	}
	
}
